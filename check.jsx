/*author : lewis  *data : 6/2/2016  *function : check psd   *///debug  mode//$.level = 1//layout of dialog var dlg = new Window('dialog', 'PSD CHECK');dlg.location = [100, 100];dlg.size = [300, 400];dlg.btnPnl = dlg.add('panel', [0, 0, 300, 400], 'CHECK'); dlg.btnPnl.checkBtn = dlg.btnPnl.add('button', [20, 20, 70, 70], 'CHECK');//check psd buttondlg.btnPnl.closeBtn = dlg.btnPnl.add('button', [230, 20, 280, 70], 'CLOSE');//close dialog buttondlg.btnPnl.editText = dlg.btnPnl.add('edittext', [0, 100, 300, 400], 'error:\n', {multiline:true});var log = dlg.btnPnl.editText;//error log/*just close dialog and the merge will not be stoped */function closeBtnOnClick(){    dlg.close (0);}dlg.btnPnl.closeBtn.onClick = closeBtnOnClick;var doc;//document that will be checked//规则1:最顶层目录只能有一个function checkR1(){    if(doc.layerSets.length > 1){        log.text += "规则1:最顶层目录只能有一个\n";   }} //rule2:psd name should  be equal with "home"/"selection" and so on //规则2:最顶层目录名应该是home/selection/map/spa/makeup/dress/show function checkR2(){    var result = false;    var TOPNAME = ["home", "selection", "map"];    var topName = doc.layerSets[0].name;    for(var i=0; i<TOPNAME.length; i++){        if(topName == TOPNAME[i]){            result = true;        }    }    if(!result){        log.text += "规则2:最顶层目录名应该是home/selection/map/spa/makeup/dress/show\n";    }}//规则3：目录名不要包含大写字母，目录名最后一个字符不要是s或者空格function cr3(layerSet){    //大写检查   for(var i=0; i<layerSet.name.length; i++){       if(layerSet.name[i] >= 'A' && layerSet.name[i]<= 'Z'){           log.text += ("规则3：目录名不要包含大写字母" + layerSet.name + '\n');       }       }    //检查最后一个字符是否是s还是空格    if((layerSet.name != 'dress' && layerSet.name[layerSet.name.length-1] == 's') ||         layerSet.name[layerSet.name.length-1] == ' '){             log.text += ("规则3：目录名最后一个字符不要是s或者空格" + layerSet.name + '\n');    }        //递归检查子目录    for(var i=0; i<layerSet.layerSets.length; i++){        cr3(layerSet.layerSets[i]);    }}//比较耗时间function checkR3(){    for(var i=0; i<doc.layerSets.length; i++){        cr3(doc.layerSets[i]);    }}/*半匹配 earring与earing就是半匹配，earring与earsing也是半匹配  *一个单词有部分字符(一半以上)在另一个单词中找到就是半匹配  *///非常耗时间，而且正确度不高，暂不使用function isHalfMatch(w1, w2){    var matchNum = 0;     for(var i=0; i<w1.length; i++){        var c = w1[i];        for(var j=0; j<w2.length; j++){            if(c == w2[j]){                matchNum++;                break;            }        }    }    if((matchNum > w1.length * 0.8 && w1.length != w2.length) ||         (matchNum > w1.length * 0.8 && matchNum != w1.length && w1.length == w2.length)){        return true;    }    return false;}/*半匹配检查*///比较耗时间 function halfMatchCheck(dictionary, layerSet){	for (var i = 0; i < layerSet.layerSets.length; i++) {		for (var j = 0; j < dictionary.length; j++) {			var w1 = layerSet.layerSets[i].name			var w2 = dictionary[j]			if (isHalfMatch(layerSet.layerSets[i].name, dictionary[j])) {				log.text += ("规则4：目录名不匹配," + w1 + "!=" + w2 + "\n");			};		};			halfMatchCheck(dictionary, layerSet.layerSets[i]);		};}//对dress场景的psd进行检查function checkDress(layerSet){    //检查dress目录    var DRESS = ["dress up layer", "eyebrow", "model"];    if(layerSet.layerSets.length !=3){        log.text += "dress规则1.1：目录个数不对，dress目录下应该包含dress up layer/eyebrow/model三个目录\n";    }        var result = 0;    for(var i=0; i<layerSet.layerSets.length; i++){        for(var j=0; j<DRESS.length; j++){            if(layerSet.layerSets[i].name == DRESS[j]){                result++;                break;            }        }    }    if(result !=3){            log.text += "dress规则1.2：目录名不匹配，dress目录下应该包含dress up layer/eyebrow/model三个目录\n";    }        //检查dress up layer目录    var DRESSUPLAYER = ["headwear", "earring", "hair", "necklace", "bracelet", "handstuff", "shoe"];    layerSet = layerSet.layerSets.getByName("dress up layer");//try catch    for(var i=0; i<layerSet.layerSets.length; i++){        var w1 =  layerSet.layerSets[i].name;        for(var j=0; j<DRESSUPLAYER.length; j++){            var w2 = DRESSUPLAYER[j];            if(isHalfMatch(w1, w2)){                  log.text += ("dress规则1.3：目录名不匹配," + w1 + "!=" + w2 + "\n");                  break;            }             }    }}//对makeup场景的psd进行检查function checkMakeup(layerSet){	// var dictionary = ["dress up layer", "headwear", "hair", "earring", "pupil", "smear layer",	// 				  "eyebrow", "eyelash", "eyeliner", "blusher", "eyeshadow", "lipstick",	// 				  "default waist", "model"];	// halfMatchCheck(dictionary, layerSet);	//检查makeup目录下子目录	var MAKEUP = ["dress up layer", "smear layer", "default waist", "model"];	var makeupSubLayerSet;	for(var i=0; i<MAKEUP.length; i++){		try{			makeupSubLayerSet = layerSet.layerSets.getByName(MAKEUP[i]);		}		catch(e){			log.text += ("makeup规则1.0：makeup目录下不存在" + MAKEUP[i] +"目录\n");			}	}	    //检查smear layer目录下子目录    var SMEARLAYER = ["eyebrow", "eyelash", "eyeliner", "blusher", "eyeshadow", "lipstick"];    var isExistSmearLayerSet = false;    var isExist = [false, false, false, false, false, false];    var smearLayerSet;    try{        smearLayerSet = layerSet.layerSets.getByName("smear layer");        isExistSmearLayerSet = true;    }    catch(e){         log.text += "makeup规则1.1：smear layer目录不存在\n";    }        if(smearLayerSet != undefined){        var subLayerSet;        for(var i=0; i<SMEARLAYER.length; i++){             try{                 subLayerSet = smearLayerSet.layerSets.getByName(SMEARLAYER[i]);                 isExist[i] = true;            }            catch(e){                log.text += ("makeup规则1.2：smear layer目录下不存在" + SMEARLAYER[i] +"目录\n");            }        }    }        //检查smear layer下面的子目录eyebrow/eyelash/eyeliner下的1/2/3/4子目录下的范围应该相等    for (var i = 0; i < isExist.length; i++) {    	if (isExist[i]) {    		var subLayerSet = smearLayerSet.layerSets.getByName(SMEARLAYER[i]);    		var preBounds = null;//边界    		var prename = null;    		for(var j=0; j<subLayerSet.layerSets.length; j++){    			var subSubLayerSet = subLayerSet.layerSets[j];    			//存在范围artLayer    			var boundsArtLayer= subSubLayerSet.artLayers.getByName("范围")    			var name = subSubLayerSet.name;    			//所有范围layer大小一样    			var bounds = boundsArtLayer.bounds;    			if (preBounds) {    				if (bounds[0] != preBounds[0] ||     					bounds[1] != preBounds[1] ||    					bounds[2] != preBounds[2] ||    					bounds[3] != preBounds[3]) {    					    					log.text += ("makeup规则1.3：" + subLayerSet.name + "范围大小不一样" + "\n");    					log.text += (prename + "=> [" + preBounds[0] + ", " + preBounds[1]     								+ ", " + preBounds[2] + ", " + preBounds[3] + "]\n");    					log.text += (name + "=> [" + bounds[0] + ", " + bounds[1]     								+ ", " + bounds[2] + ", " + bounds[3]+ "]\n");    					break;    				}    			}    			preBounds = bounds;    			prename = name;    		}    	}    }}   /*check document*/function checkBtnOnClick(){    var docCount = app.documents.length;//documents count    if(docCount <= 0 ){return;}        //get document infomation    doc = app.documents[0];//get check document    /*var name = doc.name;    var width = doc.width;    var height = doc.height;    var resolution = doc.resolution;*/        //check psd    checkR1();    checkR2();    checkR3();    if(doc.layerSets[0].name == "dress"){        checkDress(doc.layerSets[0]);    }    else(doc.layerSets[0].name == "makeup"){        checkMakeup(doc.layerSets[0]);    }}dlg.btnPnl.checkBtn.onClick = checkBtnOnClick;//finally show dialogdlg.show();